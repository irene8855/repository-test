import os
import csv
import time
import requests
import pandas as pd
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from dotenv import load_dotenv
from web3 import Web3

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥–∏ –∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
POLYGON_API_KEY = os.getenv("POLYGON_API_KEY")
INFURA_URL = f"https://polygon-mainnet.infura.io/v3/{POLYGON_API_KEY}"  # –ò–ª–∏ Alchemy URL
w3 = Web3(Web3.HTTPProvider(INFURA_URL))

# –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Ç–æ–∫–µ–Ω—ã
PLATFORMS = {
    "https://www.sushi.com": "SushiSwap",
    "https://app.uniswap.org/": "Uniswap",
    "https://1inch.io": "1inch"
}

TOKENS = {
    "USDT": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "FRAX": "0x853d955acef822db058eb8505911ed77f175b99e",
    "EMT": "0x0000000000000000000000000000000000000000",  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
    "AAVE": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
    "LDO": "0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
    "BET": "0x0000000000000000000000000000000000000000",  # –∑–∞–º–µ–Ω–∏—Ç—å
    "wstETH": "0x7f39C581F595B53c5cbf63B5b4F30D47b810F1eC",
    "GMT": "0x0000000000000000000000000000000000000000",  # –∑–∞–º–µ–Ω–∏—Ç—å
    "Link": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
    "SAND": "0x0000000000000000000000000000000000000000"  # –∑–∞–º–µ–Ω–∏—Ç—å
}

HISTORICAL_CSV = "historical.csv"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ML –º–æ–¥–µ–ª–∏
def load_and_train_model():
    df = pd.read_csv(HISTORICAL_CSV, delimiter='\t')
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: platform –∏ pair –≤ —á–∏—Å–ª–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    df['platform_id'] = df['platform'].astype('category').cat.codes
    df['pair_id'] = df['pair'].astype('category').cat.codes

    features = df[['timing', 'platform_id', 'pair_id']]
    target_low = df['profit_low']
    target_high = df['profit_high']

    X_train, X_test, y_train_low, y_test_low = train_test_split(features, target_low, test_size=0.2, random_state=42)
    _, _, y_train_high, y_test_high = train_test_split(features, target_high, test_size=0.2, random_state=42)

    model_low = RandomForestRegressor(n_estimators=100, random_state=42)
    model_high = RandomForestRegressor(n_estimators=100, random_state=42)

    model_low.fit(X_train, y_train_low)
    model_high.fit(X_train, y_train_high)

    return model_low, model_high, df

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    r = requests.post(url, data=payload)
    if not r.ok:
        print(f"Telegram send error: {r.text}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ —Å prefilled swap –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
def generate_trade_link(platform_url, pair):
    tokens = pair.split("->")
    base_urls = {
        "https://1inch.io": f"https://app.1inch.io/#/polygon/swap/{tokens[0]}/{tokens[1]}",
        "https://www.sushi.com": f"https://app.sushi.com/swap?inputCurrency={tokens[0]}&outputCurrency={tokens[1]}",
        "https://app.uniswap.org/": f"https://app.uniswap.org/#/swap?inputCurrency={tokens[0]}&outputCurrency={tokens[1]}"
    }
    return base_urls.get(platform_url, platform_url)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–æ on-chain —á–µ—Ä–µ–∑ Polygon API (–ø—Ä–∏–º–µ—Ä)
def get_onchain_price(token_address):
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ Polygon API –∏–ª–∏ Web3 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º ‚Äî –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—É–±–ª–∏—á–Ω—ã—Ö API DEX –∏–ª–∏ –æ—Ä–∞–∫–ª–æ–≤
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º float —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ USDT, –∑–∞–≥–ª—É—à–∫–∞:
    return 1.0  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ (confirmed) ‚Äî —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ on-chain
def check_trade_result(pair, buy_time, sell_time):
    # –†–∞–∑–±–æ—Ä –ø–∞—Ä—ã
    tokens = pair.split("->")
    token_in = TOKENS.get(tokens[0])
    token_out = TOKENS.get(tokens[1])
    if not token_in or not token_out:
        return None

    # –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã buy –∏ sell on-chain (–∑–∞–ø—Ä–æ—Å—ã –∫ API –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)
    price_buy = get_onchain_price(token_in)  # –ø—Ä–∏–º–µ—Ä
    price_sell = get_onchain_price(token_out)  # –ø—Ä–∏–º–µ—Ä

    profit_percent = ((price_sell - price_buy) / price_buy) * 100
    return profit_percent

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ predicted —Å–æ–æ–±—â–µ–Ω–∏—è
def send_predicted(trade, model_low, model_high, df):
    pair = trade["pair"]
    timing = trade["timing"]
    platform = trade["platform"]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
    platform_id = df.loc[df['platform'] == platform, 'platform'].astype('category').cat.codes.iloc[0]
    pair_id = df.loc[df['pair'] == pair, 'pair'].astype('category').cat.codes.iloc[0]

    X_pred = [[timing, platform_id, pair_id]]
    profit_low_pred = model_low.predict(X_pred)[0]
    profit_high_pred = model_high.predict(X_pred)[0]

    now = datetime.utcnow()
    start_time = now + timedelta(minutes=1)
    sell_time = start_time + timedelta(minutes=timing)

    trade_link = generate_trade_link(platform, pair)

    msg = (f"üìâ{pair}üìà\n"
           f"TIMING: {timing} MIN‚åõÔ∏è\n"
           f"TIME FOR START: {start_time.strftime('%H:%M UTC')}\n"
           f"TIME FOR SELL: {sell_time.strftime('%H:%M UTC')}\n"
           f"PROFIT: {profit_low_pred:.2f}-{profit_high_pred:.2f} üí∏\n"
           f"PLATFORMS: üìä\n"
           f"{trade_link}")
    send_telegram_message(msg)
    return start_time, sell_time

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ confirmed —Å–æ–æ–±—â–µ–Ω–∏—è
def send_confirmed(trade, start_time, sell_time):
    pair = trade["pair"]
    platform = trade["platform"]

    profit_real = check_trade_result(pair, start_time, sell_time)
    if profit_real is None:
        msg = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ {pair} –Ω–∞ {platform}."
    else:
        msg = (f"‚úÖ –°–¥–µ–ª–∫–∞ {pair} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
               f"–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_real:.2f}%.\n"
               f"–ü—Ä–æ–≥–Ω–æ–∑ –æ–ø—Ä–∞–≤–¥–∞–Ω." if profit_real > 0 else f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è.")

    send_telegram_message(msg)

def main():
    send_telegram_message("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ç–∏ Polygon –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º Sushi, Uniswap –∏ 1inch.")

    model_low, model_high, df = load_and_train_model()

    while True:
        now = datetime.utcnow()

        # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏: –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–¥–µ–ª–∫–∞–º –∏–∑ historical –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º predicted
        for trade in df.to_dict(orient='records'):
            start_time, sell_time = send_predicted(trade, model_low, model_high, df)

            # –ñ–¥–µ–º –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ª—É—á—à–µ —Ä–∞—Å–ø–∏—Å–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
            wait_seconds = (sell_time - datetime.utcnow()).total_seconds()
            if wait_seconds > 0:
                time.sleep(wait_seconds)

            send_confirmed(trade, start_time, sell_time)

            time.sleep(5)  # –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏

        time.sleep(60)  # —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª

if __name__ == "__main__":
    main()
    
