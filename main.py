import os
import time
import pandas as pd
import numpy as np
import requests
import datetime
from web3 import Web3
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
load_dotenv()
POLYGON_RPC = os.getenv("POLYGON_RPC")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Web3 –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
web3 = Web3(Web3.HTTPProvider(POLYGON_RPC))

ROUTERS = {
    "Uniswap": {
        "url": "https://app.uniswap.org/#/swap?inputCurrency={}&outputCurrency={}",
        "router_address": Web3.to_checksum_address("0xE592427A0AEce92De3Edee1F18E0157C05861564"),
    },
    "SushiSwap": {
        "url": "https://www.sushi.com/swap?inputCurrency={}&outputCurrency={}",
        "router_address": Web3.to_checksum_address("0x1b02da8cb0d097eb8d57a175b88c7d8b47997506"),
    },
    "1inch": {
        "url": "https://app.1inch.io/#/137/swap/{}-{}/USDT",
        "router_address": Web3.to_checksum_address("0x1111111254fb6c44bac0bed2854e76f90643097d"),  # 1inch router (–ø—Ä–∏–º–µ—Ä)
    }
}

TOKENS = {
    "USDT": Web3.to_checksum_address("0xc2132D05D31c914a87C6611C10748AaCbA6cD43E"),
    "FRAX": Web3.to_checksum_address("0x45c32fa6df82ead1e2ef74d17b76547eddfaff89"),
    "AAVE": Web3.to_checksum_address("0xd6df932a45c0f255f85145f286ea0b292b21c90b"),
    "LDO": Web3.to_checksum_address("0xC3C7d422809852031b44ab29EEC9F1EfF2A58756"),
    "BET": Web3.to_checksum_address("0x46e6b214b524310239732D51387075E0e70970bf"),
    "wstETH": Web3.to_checksum_address("0x7ceb23fd6bc0add59e62ac25578270cff1b9f619"),
    "GMT": Web3.to_checksum_address("0x5fE80d2CD054645b9419657d3d10d26391780A7B"),
    "Link": Web3.to_checksum_address("0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39"),
    "SAND": Web3.to_checksum_address("0xbbba073c31bf03b8acf7c28ef0738decf3695683"),
    "EMT": Web3.to_checksum_address("0x6bE7E4A2202cB6E60ef3F94d27a65b906FdA7D86")
}

# ABI –¥–ª—è getAmountsOut (–≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
GET_AMOUNTS_OUT_ABI = '[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"}]'

# –î–ª—è —Å–æ–±—ã—Ç–∏–π swap (–ø—Ä–∏–º–µ—Ä–Ω—ã–π Event Signature –¥–ª—è UniswapV3/SushiSwap V2)
# –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: —Å–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏ –ø–æ –º–µ—Ç–æ–¥—É swap (—É —Ä–∞–∑–Ω—ã—Ö DEX –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
# –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å ABI –∫–∞–∂–¥–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞. –ó–¥–µ—Å—å –æ–±—â–∏–π –ø—Ä–∏–º–µ—Ä –ø–æ —Å–æ–±—ã—Ç–∏—é Swap (Uniswap V2)

# Swap Event signature (keccak256("Swap(address,uint256,uint256,uint256,uint256,address)"))
SWAP_EVENT_SIGNATURE = web3.keccak(text="Swap(address,uint256,uint256,uint256,uint256,address)").hex()

# –¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–∫–∞
def send_telegram(msg: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": msg}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print(f"Telegram send error: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DEX (–∏—Å–ø–æ–ª—å–∑—É–µ–º getAmountsOut)
def get_profit_on_dex(router_address, token_symbol):
    try:
        contract = web3.eth.contract(address=router_address, abi=GET_AMOUNTS_OUT_ABI)
        path = [TOKENS["USDT"], TOKENS[token_symbol], TOKENS["USDT"]]
        amount_in = 10**6  # 1 USDT (6 decimals)
        result = contract.functions.getAmountsOut(amount_in, path).call()
        profit_percent = (result[-1] / 1e6 - 1) * 100
        return profit_percent
    except Exception as e:
        #print(f"Error getting profit for {token_symbol} on {router_address}: {e}")
        return None

# –°–±–æ—Ä –æ–±—ä—ë–º–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è Swap –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–º —Ä–æ—É—Ç–µ—Ä–µ
def get_volume_volatility(router_address, token_symbol):
    now_block = web3.eth.block_number
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –±–ª–æ–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~5 –º–∏–Ω—É—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 –±–ª–æ–∫–∞ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ Polygon)
    blocks_to_check = 20  
    from_block = max(now_block - blocks_to_check, 0)
    to_block = now_block

    try:
        logs = web3.eth.get_logs({
            "fromBlock": from_block,
            "toBlock": to_block,
            "address": router_address,
            "topics": [SWAP_EVENT_SIGNATURE]
        })
    except Exception as e:
        #print(f"Error getting logs for volume: {e}")
        return 0, 0

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–≤ –∏–∑ –ª–æ–≥–∞: –ø–∞—Ä—Å–∏–º –ø–æ —Ç–æ–ø–∏–∫–∞–º –∏ data
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—É–º–º–∏—Ä—É–µ–º –ø–æ token_symbol –æ–±—ä–µ–º—ã –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
    # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ–≥–æ ABI –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è Swap
    # –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ DEX)

    volumes = []
    # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫—É (—Å–ª–æ–∂–Ω–æ –±–µ–∑ ABI)
    # –í–æ–∑—å–º—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ proxy –¥–ª—è –æ–±—ä–µ–º–∞, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî –ø–æ–∫–∞ 0 (–Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)

    volume = len(logs)  # proxy –¥–ª—è –æ–±—ä—ë–º–∞
    volatility = 0  # placeholder, –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω —Å –¥–æ–ø. API –∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞

    return volume, volatility

# –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤—Å–µ–º DEX
def get_profits(token_symbol):
    profits = {}
    for dex_name, dex_info in ROUTERS.items():
        router_addr = dex_info["router_address"]
        profit = get_profit_on_dex(router_addr, token_symbol)
        if profit is not None:
            profits[dex_name] = profit
    return profits

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ swap –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
def build_url(platform, token_symbol):
    if platform == "1inch":
        return ROUTERS["1inch"]["url"].format("USDT", token_symbol)
    elif platform == "SushiSwap":
        return ROUTERS["SushiSwap"]["url"].format("USDT", TOKENS[token_symbol])
    else:
        return ROUTERS["Uniswap"]["url"].format("USDT", TOKENS[token_symbol])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ csv
def save_to_csv(data):
    filename = "historical.csv"
    df = pd.DataFrame([data])
    if os.path.exists(filename):
        df_existing = pd.read_csv(filename)
        df = pd.concat([df_existing, df], ignore_index=True)
    df.to_csv(filename, index=False)

if __name__ == "__main__":
    notified = {}  # token_symbol -> last send datetime
    trade_records = {}  # token_symbol -> {'start': datetime, 'profit': float, 'platform': str}

    send_telegram("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –≤—Å–ø–ª–µ—Å–∫–æ–≤ –ø—Ä–∏–±—ã–ª–∏...")

    while True:
        now = datetime.datetime.now()
        for token in TOKENS:
            if token == "USDT":
                continue

            profits = get_profits(token)
            # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç —Å—Ä–µ–¥–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
            if not profits:
                continue

            max_platform = max(profits, key=profits.get)
            max_profit = profits[max_platform]

            # –§–∏–ª—å—Ç—Ä –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç –≤—ã—à–µ 1.6%
            if max_profit > 1.6:
                last_sent = notified.get(token, now - datetime.timedelta(minutes=10))
                if (now - last_sent).total_seconds() < 300:
                    continue  # –Ω–µ —Å–ø–∞–º–∏–º —á–∞—â–µ 5 –º–∏–Ω—É—Ç

                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                volume, volatility = get_volume_volatility(ROUTERS[max_platform]["router_address"], token)

                timing = 4  # –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
                delay_notice = 3  # –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–æ —Å—Ç–∞—Ä—Ç–∞

                start_time_dt = now + datetime.timedelta(minutes=delay_notice)
                end_time_dt = start_time_dt + datetime.timedelta(minutes=timing)
                start_time = start_time_dt.strftime("%H:%M")
                end_time = end_time_dt.strftime("%H:%M")

                url = build_url(max_platform, token)

                msg = (
                    f"üìâUSDT->{token}->USDTüìà\n"
                    f"PLATFORM: {max_platform}\n"
                    f"TIMING: {timing} MIN‚åõÔ∏è\n"
                    f"START TIME: {start_time}\n"
                    f"SELL TIME: {end_time}\n"
                    f"ESTIMATED PROFIT: {round(max_profit,2)} % üí∏\n"
                    f"VOLUME (events): {volume}\n"
                    f"VOLATILITY: {volatility}\n"
                    f"TRADE LINK:\n{url}"
                )
                send_telegram(msg)

                notified[token] = now
                trade_records[token] = {
                    "start": now,
                    "profit_estimated": max_profit,
                    "platform": max_platform,
                    "volume": volume,
                    "volatility": volatility,
                    "start_time": start_time,
                    "end_time": end_time,
                    "url": url,
                }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ timing –º–∏–Ω—É—Ç
        to_remove = []
        for token, info in trade_records.items():
            elapsed = (now - info["start"]).total_seconds()
            if elapsed >= 60*4:  # —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã —Å—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                real_profit = get_profit_on_dex(ROUTERS[info["platform"]]["router_address"], token)
                if real_profit is not None:
                    msg = (
                        f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –ø–æ {token} –Ω–∞ {info['platform']}:\n"
                        f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {round(info['profit_estimated'],2)} %\n"
                        f"–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {round(real_profit,2)} %\n"
                        f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {info['start_time']} - {info['end_time']}\n"
                        f"–û–±—ä—ë–º (events): {info['volume']}\n"
                        f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {info['volatility']}\n"
                        f"–°—Å—ã–ª–∫–∞: {info['url']}"
                    )
                    send_telegram(msg)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
                    save_to_csv({
                        "token": token,
                        "platform": info["platform"],
                        "start_time": info["start_time"],
                        "end_time": info["end_time"],
                        "predicted_profit": info["profit_estimated"],
                        "real_profit": real_profit,
                        "volume": info["volume"],
                        "volatility": info["volatility"],
                        "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
                        "url": info["url"]
                    })

                to_remove.append(token)

        for token in to_remove:
            del trade_records[token]

        time.sleep(60)
        
